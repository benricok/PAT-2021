unit util_u;

interface

uses SysUtils, System.Hash, Classes, Password, Vcl.Forms, Vcl.Dialogs;

type TUtil = class(TComponent)
  Function hash(sString : string) : string;
  Function noSpace(sString : string) : string;
  Function newPassword(var sHashedPass : string; frmConfig : Password.Tstate) : boolean;
  procedure getPriv(var sPriv: string);
  Procedure error(sError : string);
  Procedure initFile(sFileName : string; var tFile : Textfile);
  Procedure logevent(sEvent : string; iType : integer);
  Function ELFHash(const sKey : string; iTableSize : integer) : integer;
end;

Var
  Util : TUtil;

implementation

function TDPJWHash(const sKey : string; iTableSize : integer) : integer;
Var
  iG, iHash : longint;
  i : integer;
begin
  iHash := 0;
  for i := 1 to length(sKey) do begin
    iHash := (iHash shl 4) + ord(sKey[i]);
    iG := iHash and $F0000000;
      if (iG<>0) then
        iHash := iHash xor (iG shr 24) xor iG;
  end;

Result := iHash mod iTableSize;
end;


{function TDSimpleHash(const aKey : string; aTableSize : integer) : integer;
var
  sHash : string;
  i : integer;
begin
  sHash := ((sHash * 17) + ord(aKey[i])) mod aTableSize;
  Result := sHash;
  if (Result < 0) then inc(Result, aTableSize);

end;}

Function TUtil.hash(sString : string) : string;
begin
// Hash password
  result := THashMD5.GetHashString(sString);
end;

// Assign file and check if it exist, else create it
procedure TUtil.initFile(sFileName: string; var tFile : Textfile);
begin
  AssignFile(tFile, sFileName);
  if NOT(FileExists(sFileName)) then
    Rewrite(tFile);
end;

//Event logger
procedure TUtil.logevent(sEvent: string; iType: integer);
Var
  tFile : TextFile;
begin
  initFile('event.log', tFile);
  Append(tFile);
  Writeln(tfile, sEvent);
  CloseFile(tFile);
end;

// Remove spaces in string
Function TUtil.noSpace(sString : string) : string;
Var
  i : integer;
begin
  result := '';
  for i := 1 to length(sString) do
    if NOT(sString[i] = ' ') then
      result := result + sString[i];
end;

Function TUtil.newPassword(var sHashedPass : string; frmConfig : Password.Tstate) : boolean;
Var
  bChanged : boolean;
begin
  bChanged := false;
  result := true;

  // Create dynamic form
  frmPassword := TfrmPassword.Create(nil);
  with frmPassword do begin
    setState(frmConfig);
    Show;

    while NOT((bChanged = true) OR (getState = canceled)) do begin
      // Wait for user to trigger cancel or ok button event to update state
      while NOT(getstate IN [done,canceled]) do begin
        Application.ProcessMessages;
        sleep(10);
      end;
      if getState = canceled then
        break;
      if frmConfig = changePass then begin
        if checkChangePass then begin
          sHashedPass := hash(edtNewPass.Text);
          bChanged := true;
        end else
          setState(frmConfig);
      end;
      if frmConfig = newPass then
        if checkNewPass then begin
          sHashedPass := hash(edtNewPass.Text);
          bChanged := true;
        end else
          setState(frmConfig);
    end;

    if getstate = canceled then
      result := false;

    // free form object after use
    free;
  end;
end;

procedure TUtil.error(sError: string);
begin
  MessageDlg(sError, mtError, [mbOK], 0);
end;

procedure TUtil.getPriv(var sPriv: string);
begin
  if MessageDlg('Is this user part of the HR department?', mtConfirmation, [mbNo,mbYes], 7) = 7 then
    sPriv := 'user'
  else
    sPriv := 'HR';
end;
end.
